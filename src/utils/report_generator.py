import json
import os
from datetime import datetime
from typing import Dict, Any, Optional, List
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor, black, white, green, red, blue
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.figure import Figure
import numpy as np
import io
import base64

class ReportGenerator:
    """Generate investment reports in PDF and JSON formats"""
    
    def __init__(self, output_dir: str = "reports"):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        
        # Color scheme
        self.colors = {
            "primary": HexColor("#1f77b4"),
            "secondary": HexColor("#ff7f0e"),
            "success": HexColor("#2ca02c"),
            "danger": HexColor("#d62728"),
            "warning": HexColor("#ff7f0e"),
            "info": HexColor("#17a2b8"),
            "light": HexColor("#f8f9fa"),
            "dark": HexColor("#343a40")
        }
    
    def generate_pdf_report(self, data: Dict[str, Any]) -> str:
        """Generate PDF investment report"""
        try:
            # Create filename
            symbol = data.get("stock_symbol", "STOCK")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{symbol}_investment_report_{timestamp}.pdf"
            filepath = os.path.join(self.output_dir, filename)
            
            # Create PDF document
            doc = SimpleDocTemplate(filepath, pagesize=A4)
            story = []
            
            # Get styles
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Title'],
                fontSize=24,
                spaceAfter=30,
                textColor=self.colors["primary"],
                alignment=TA_CENTER
            )
            
            heading_style = ParagraphStyle(
                'CustomHeading',
                parent=styles['Heading1'],
                fontSize=16,
                spaceAfter=12,
                textColor=self.colors["dark"],
                borderWidth=1,
                borderColor=self.colors["primary"],
                borderPadding=5
            )
            
            # Title page
            story.append(Paragraph(f"Stock Investment Analysis Report", title_style))
            story.append(Spacer(1, 20))
            story.append(Paragraph(f"Symbol: {symbol}", styles['Heading2']))
            story.append(Paragraph(f"Analysis Date: {datetime.now().strftime('%B %d, %Y')}", styles['Normal']))
            story.append(Paragraph(f"Generated by: Stock Analysis AI Agent", styles['Normal']))
            story.append(PageBreak())
            
            # Executive Summary
            story.append(Paragraph("Executive Summary", heading_style))
            analysis_result = data.get("analysis_result", {})
            if analysis_result:
                summary = analysis_result.get("summary", "No summary available")
                story.append(Paragraph(summary, styles['Normal']))
                story.append(Spacer(1, 12))
                
                # Key metrics table
                metrics_data = [
                    ["Metric", "Value"],
                    ["Recommendation", analysis_result.get("recommendation", "N/A")],
                    ["Confidence Score", f"{analysis_result.get('confidence_score', 0):.2f}"],
                    ["Overall Sentiment", analysis_result.get("sentiment_analysis", "N/A")],
                    ["Risk Level", self._get_risk_level(analysis_result)]
                ]
                
                metrics_table = Table(metrics_data)
                metrics_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), self.colors["primary"]),
                    ('TEXTCOLOR', (0, 0), (-1, 0), white),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), self.colors["light"]),
                    ('GRID', (0, 0), (-1, -1), 1, self.colors["dark"])
                ]))
                story.append(metrics_table)
                story.append(Spacer(1, 20))
            
            story.append(PageBreak())
            
            # Stock Performance Analysis
            story.append(Paragraph("Stock Performance Analysis", heading_style))
            stock_data = data.get("raw_data", {}).get("stock_data", {})
            if stock_data:
                current_data = stock_data.get("current_data", {})
                performance = stock_data.get("performance", {})
                
                performance_data = [
                    ["Performance Metric", "Value"],
                    ["Current Price", f"${current_data.get('price', 0):.2f}"],
                    ["Daily Change", f"{current_data.get('change_percent', 0):.2f}%"],
                    ["Period Return", f"{performance.get('period_return', 0):.2f}%"],
                    ["Volatility", f"{performance.get('volatility', 0):.2f}%"],
                    ["52-Week High", f"${performance.get('high_52w', 0):.2f}"],
                    ["52-Week Low", f"${performance.get('low_52w', 0):.2f}"]
                ]
                
                performance_table = Table(performance_data)
                performance_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), self.colors["primary"]),
                    ('TEXTCOLOR', (0, 0), (-1, 0), white),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), self.colors["light"]),
                    ('GRID', (0, 0), (-1, -1), 1, self.colors["dark"])
                ]))
                story.append(performance_table)
                story.append(Spacer(1, 20))
            
            story.append(PageBreak())
            
            # News Sentiment Analysis
            story.append(Paragraph("News Sentiment Analysis", heading_style))
            news_data = data.get("raw_data", {}).get("news_data", {})
            if news_data:
                sentiment_data = [
                    ["Sentiment Metric", "Value"],
                    ["Overall Sentiment", news_data.get("overall_sentiment", "N/A")],
                    ["Average Sentiment Score", f"{news_data.get('average_sentiment_score', 0):.2f}"],
                    ["Confidence", f"{news_data.get('confidence', 0):.2f}"],
                    ["Articles Analyzed", str(news_data.get('articles_count', 0))]
                ]
                
                sentiment_table = Table(sentiment_data)
                sentiment_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), self.colors["primary"]),
                    ('TEXTCOLOR', (0, 0), (-1, 0), white),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), self.colors["light"]),
                    ('GRID', (0, 0), (-1, -1), 1, self.colors["dark"])
                ]))
                story.append(sentiment_table)
                story.append(Spacer(1, 12))
                
                # Key topics
                key_topics = news_data.get("key_topics", [])
                if key_topics:
                    story.append(Paragraph("Key Topics:", styles['Heading3']))
                    topics_text = ", ".join(key_topics[:10])  # Limit to 10 topics
                    story.append(Paragraph(topics_text, styles['Normal']))
            
            story.append(PageBreak())
            
            # Financial Health Analysis
            story.append(Paragraph("Financial Health Analysis", heading_style))
            financial_data = data.get("raw_data", {}).get("financial_data", {})
            if financial_data:
                financial_health = financial_data.get("financial_health", {})
                if financial_health:
                    health_data = [
                        ["Health Metric", "Value"],
                        ["Health Score", f"{financial_health.get('health_score', 0)}/100"],
                        ["Overall Health", financial_health.get('overall_health', 'N/A')],
                        ["Key Strengths", ", ".join(financial_health.get('key_strengths', []))],
                        ["Key Weaknesses", ", ".join(financial_health.get('key_weaknesses', []))]
                    ]
                    
                    health_table = Table(health_data)
                    health_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), self.colors["primary"]),
                        ('TEXTCOLOR', (0, 0), (-1, 0), white),
                        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, 0), 12),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), self.colors["light"]),
                        ('GRID', (0, 0), (-1, -1), 1, self.colors["dark"])
                    ]))
                    story.append(health_table)
            
            story.append(PageBreak())
            
            # Investment Recommendation
            story.append(Paragraph("Investment Recommendation", heading_style))
            if analysis_result:
                recommendation = analysis_result.get("recommendation", "No recommendation available")
                story.append(Paragraph(f"<b>Recommendation:</b> {recommendation}", styles['Normal']))
                story.append(Spacer(1, 12))
                
                # Risk factors
                risk_factors = analysis_result.get("risk_factors", [])
                if risk_factors:
                    story.append(Paragraph("<b>Risk Factors:</b>", styles['Heading3']))
                    for risk in risk_factors:
                        story.append(Paragraph(f"• {risk}", styles['Normal']))
                    story.append(Spacer(1, 12))
                
                # Disclaimer
                story.append(Paragraph("<b>Disclaimer:</b>", styles['Heading3']))
                disclaimer_text = """
                This report is generated by an AI agent and should not be considered as financial advice. 
                The information provided is based on available data and algorithms, and may not be accurate 
                or complete. Always consult with a qualified financial advisor before making investment decisions. 
                Past performance does not guarantee future results.
                """
                story.append(Paragraph(disclaimer_text, styles['Normal']))
            
            # Build PDF
            doc.build(story)
            
            return filepath
            
        except Exception as e:
            print(f"Error generating PDF report: {e}")
            return None
    
    def generate_json_report(self, data: Dict[str, Any]) -> str:
        """Generate JSON investment report"""
        try:
            # Create filename
            symbol = data.get("stock_symbol", "STOCK")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{symbol}_investment_report_{timestamp}.json"
            filepath = os.path.join(self.output_dir, filename)
            
            # Prepare JSON data
            json_data = {
                "report_metadata": {
                    "symbol": data.get("stock_symbol"),
                    "report_type": "investment_analysis",
                    "generated_at": datetime.now().isoformat(),
                    "generated_by": "Stock Analysis AI Agent",
                    "version": "1.0"
                },
                "analysis_summary": data.get("analysis_result", {}),
                "raw_data": data.get("raw_data", {}),
                "conversation_history": data.get("conversation_history", [])
            }
            
            # Write JSON file
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, indent=2, ensure_ascii=False)
            
            return filepath
            
        except Exception as e:
            print(f"Error generating JSON report: {e}")
            return None
    
    def _get_risk_level(self, analysis_result: Dict[str, Any]) -> str:
        """Determine risk level from analysis result"""
        risk_factors = analysis_result.get("risk_factors", [])
        if len(risk_factors) > 3:
            return "High"
        elif len(risk_factors) > 1:
            return "Medium"
        else:
            return "Low"
    
    def generate_chart_image(self, stock_data: Dict[str, Any]) -> Optional[str]:
        """Generate stock price chart image"""
        try:
            historical_data = stock_data.get("historical_data", {})
            if not historical_data or not historical_data.get("dates"):
                return None
            
            dates = historical_data.get("dates", [])
            prices = historical_data.get("prices", [])
            
            # Create figure
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # Convert dates to datetime objects
            date_objects = [datetime.strptime(date, '%Y-%m-%d') for date in dates]
            
            # Plot
            ax.plot(date_objects, prices, color=self.colors["primary"], linewidth=2)
            ax.set_title(f'Stock Price Performance', fontsize=16, fontweight='bold')
            ax.set_xlabel('Date', fontsize=12)
            ax.set_ylabel('Price ($)', fontsize=12)
            ax.grid(True, alpha=0.3)
            
            # Format x-axis
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
            ax.xaxis.set_major_locator(mdates.MonthLocator())
            plt.xticks(rotation=45)
            
            # Save to bytes
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            
            # Convert to base64
            img_base64 = base64.b64encode(img_buffer.read()).decode()
            plt.close()
            
            return img_base64
            
        except Exception as e:
            print(f"Error generating chart: {e}")
            return None
    
    def generate_summary_report(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Generate a summary report with key insights"""
        try:
            analysis_result = data.get("analysis_result", {})
            stock_data = data.get("raw_data", {}).get("stock_data", {})
            news_data = data.get("raw_data", {}).get("news_data", {})
            financial_data = data.get("raw_data", {}).get("financial_data", {})
            
            summary = {
                "symbol": data.get("stock_symbol"),
                "analysis_date": datetime.now().isoformat(),
                "key_insights": {
                    "recommendation": analysis_result.get("recommendation", "N/A"),
                    "confidence_score": analysis_result.get("confidence_score", 0),
                    "overall_sentiment": news_data.get("overall_sentiment", "N/A"),
                    "financial_health_score": financial_data.get("financial_health", {}).get("health_score", 0),
                    "current_price": stock_data.get("current_data", {}).get("price", 0),
                    "daily_change": stock_data.get("current_data", {}).get("change_percent", 0)
                },
                "risk_assessment": {
                    "level": self._get_risk_level(analysis_result),
                    "factors": analysis_result.get("risk_factors", []),
                    "volatility": stock_data.get("performance", {}).get("volatility", 0)
                },
                "performance_metrics": {
                    "period_return": stock_data.get("performance", {}).get("period_return", 0),
                    "vs_52w_high": stock_data.get("performance", {}).get("high_52w", 0),
                    "vs_52w_low": stock_data.get("performance", {}).get("low_52w", 0)
                }
            }
            
            return summary
            
        except Exception as e:
            return {"error": str(e)}
    
    def list_reports(self) -> List[Dict[str, Any]]:
        """List all generated reports"""
        try:
            reports = []
            
            for filename in os.listdir(self.output_dir):
                if filename.endswith(('.pdf', '.json')):
                    filepath = os.path.join(self.output_dir, filename)
                    stat = os.stat(filepath)
                    
                    reports.append({
                        "filename": filename,
                        "filepath": filepath,
                        "size": stat.st_size,
                        "created": datetime.fromtimestamp(stat.st_ctime).isoformat(),
                        "modified": datetime.fromtimestamp(stat.st_mtime).isoformat(),
                        "type": "PDF" if filename.endswith('.pdf') else "JSON"
                    })
            
            return sorted(reports, key=lambda x: x['created'], reverse=True)
            
        except Exception as e:
            return [{"error": str(e)}]